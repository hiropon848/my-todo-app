import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/lib/supabase';
import { Todo } from '@/types/todo';
import { useTodoPriorities } from './useTodoPriorities';

export function useTodos(userId: string | null, filterParams?: {
  priorityIds?: string[];
  statusIds?: string[];
}) {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [isToggleLoading] = useState<string | null>(null);
  const [isAddTodoLoading, setIsAddTodoLoading] = useState(false);
  const [isUpdateTodoLoading, setIsUpdateTodoLoading] = useState(false);
  const [isDeleteTodoLoading, setIsDeleteTodoLoading] = useState(false);

  // PriorityÊÉÖÂ†±„ÇíÂèñÂæó
  const { getDefaultPriorityId } = useTodoPriorities();

  // „Éá„Éº„ÇøÂèñÂæóÈñ¢Êï∞„ÇíÂàÜÈõ¢ÔºàÂÜçÂà©Áî®ÂèØËÉΩ„Å´„Åô„ÇãÔºâ
  const fetchTodos = useCallback(async () => {
    if (!userId) {
      setIsLoading(true);
      return;
    }
    setIsLoading(true);
    setError('');
    try {
      // Âü∫Êú¨„ÇØ„Ç®„É™„ÇíÊßãÁØâÔºàÊó¢Â≠ò„Å®Âêå„ÅòÔºâ
      let query = supabase
        .from('todos')
        .select(`
          *,
          priority:todo_priorities(*),
          status:todo_statuses(*)
        `)
        .eq('user_id', userId);
      
      // „Éï„Ç£„É´„Çø„Éº„Éë„É©„É°„Éº„Çø„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÈÅ©Áî®ÔºàÊó¢Â≠òÂãï‰Ωú„Å∏„ÅÆÂΩ±Èüø„Å™„ÅóÔºâ
      if (filterParams?.priorityIds?.length) {
        query = query.in('todo_priority_id', filterParams.priorityIds);
      }
      if (filterParams?.statusIds?.length) {
        query = query.in('todo_status_id', filterParams.statusIds);
      }
      
      // ‰∏¶„Å≥È†ÜÔºàÊó¢Â≠ò„Å®Âêå„ÅòÔºâ
      query = query.order('created_at', { ascending: false });
      
      const { data: todosData, error: todosError } = await query;
      
      if (todosError) {
        throw todosError;
      }
      
      setTodos(todosData || []);
    } catch {
      setError('ToDo„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      setTodos([]);
    } finally {
      setIsLoading(false);
    }
  }, [userId, filterParams]); // useCallback„ÅÆ‰æùÂ≠òÈÖçÂàó

  useEffect(() => {
    fetchTodos();
  }, [fetchTodos]); // fetchTodos„ÅåÂ§âÂåñ„Åó„Åü„Å®„Åç„Å´ÂÆüË°å

  // ToDoÂâäÈô§„É≠„Ç∏„ÉÉ„ÇØ
  const deleteTodo = async (id: string) => {
    setIsDeleteTodoLoading(true);
    try {
      const { error: deleteError } = await supabase.from('todos').delete().eq('id', id);
      if (deleteError) {
        throw deleteError;
      }
      // ÂâäÈô§ÊàêÂäüÊôÇ„ÅÆ„ÅøUI„ÇíÊõ¥Êñ∞
      setTodos(prev => prev.filter(todo => todo.id !== id));
    } catch (error) {
      setError('ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      throw error;
    } finally {
      setIsDeleteTodoLoading(false);
    }
  };

  // ToDoËøΩÂä†„É≠„Ç∏„ÉÉ„ÇØ
  const addTodo = async (
    title: string, 
    text: string, 
    priorityId?: string,
    statusId?: string
  ) => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üìù addTodo called:', { title, text, priorityId, statusId });
    }
    setError('');
    if (!title.trim()) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ùå Title validation failed');
      }
      setError('„Çø„Ç§„Éà„É´„ÅØÂøÖÈ†à„Åß„Åô');
      return false;
    }
    
    try {
      const finalPriorityId = priorityId || getDefaultPriorityId();
      if (process.env.NODE_ENV === 'development') {
        console.log('üéØ Priority ID:', finalPriorityId);
      }
      if (!finalPriorityId) {
        if (process.env.NODE_ENV === 'development') {
          console.log('‚ùå Failed to get priority ID');
        }
        setError('ÂÑ™ÂÖàÂ∫¶„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        return false;
      }
      
      let finalStatusId = statusId;
      if (!finalStatusId) {
        if (process.env.NODE_ENV === 'development') {
          console.log('üîç Fetching default status...');
        }
        const { data: defaultStatus, error: statusError } = await supabase
          .from('todo_statuses')
          .select('id')
          .eq('name', 'Êú™ÁùÄÊâã')
          .single();

        if (statusError || !defaultStatus) {
          if (process.env.NODE_ENV === 'development') {
            console.error('‚ùå Failed to get default status:', statusError);
          }
          setError('„Éá„Éï„Ç©„É´„ÉàÁä∂ÊÖã„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
          return false;
        }
        finalStatusId = defaultStatus.id;
        if (process.env.NODE_ENV === 'development') {
          console.log('‚úÖ Default status ID:', finalStatusId);
        }
      }
      
      setIsAddTodoLoading(true);
      if (process.env.NODE_ENV === 'development') {
        console.log('üíæ Inserting todo...');
      }
      
      const { data: inserted, error: insertError } = await supabase.from('todos').insert({
        user_id: userId,
        todo_title: title,
        todo_text: text,
        todo_status_id: finalStatusId,
        todo_priority_id: finalPriorityId,
      }).select(`
        *,
        priority:todo_priorities(*),
        status:todo_statuses(*)
      `).single();
      
      if (insertError || !inserted) {
        if (process.env.NODE_ENV === 'development') {
          console.error('‚ùå Insert failed:', insertError);
        }
        setError('ToDo„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        return false;
      }
      
      if (process.env.NODE_ENV === 'development') {
        console.log('‚úÖ Todo inserted successfully:', inserted);
      }
      
      // „Éï„Ç£„É´„Çø„Éº„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂÆåÂÖ®„Å™„Éá„Éº„ÇøÂÜçÂèñÂæó
      // Êñ∞„Åó„Åè‰ΩúÊàê„Åï„Çå„ÅüToDo„Åå„Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„Å´Âêà„ÅÜ„Åã„Å©„ÅÜ„Åã„ÇíÊ≠£Á¢∫„Å´Âà§ÂÆö
      const hasActiveFilters = filterParams && (
        (filterParams.priorityIds && filterParams.priorityIds.length > 0) || 
        (filterParams.statusIds && filterParams.statusIds.length > 0)
      );
      
      if (hasActiveFilters) {
        // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®ÊôÇ: ÂÆåÂÖ®„Å™„Éá„Éº„ÇøÂÜçÂèñÂæó„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÇíÂÜçÂÆüË°å
        await fetchTodos();
      } else {
        // „Éï„Ç£„É´„Çø„Éº„Å™„ÅóÊôÇ: Êó¢Â≠ò„ÅÆÂÄãÂà•ËøΩÂä†„É≠„Ç∏„ÉÉ„ÇØ„ÇíÁ∂≠ÊåÅÔºà„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÈáçË¶ñÔºâ
        setTodos(prev => [inserted, ...prev]);
      }
      
      return true;
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('‚ùå Unexpected error in addTodo:', error);
      }
      const errorMessage = error instanceof Error ? error.message : 'ToDo„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
      setError(errorMessage);
      return false;
    } finally {
      setIsAddTodoLoading(false);
    }
  };

  // ToDoÊõ¥Êñ∞„É≠„Ç∏„ÉÉ„ÇØ
  const updateTodo = async (
    id: string,
    title: string,
    text: string,
    priorityId?: string,
    statusId?: string
  ) => {
    setError('');
    setIsUpdateTodoLoading(true);
    try {
      const updateData: { todo_title: string; todo_text: string; todo_priority_id?: string; todo_status_id?: string } = {
        todo_title: title,
        todo_text: text,
      };
      
      if (priorityId) {
        updateData.todo_priority_id = priorityId;
      }
      
      if (statusId) {
        updateData.todo_status_id = statusId;
      }
      
      const { error: updateError } = await supabase.from('todos').update(updateData).eq('id', id);
      
      if (updateError) {
        throw updateError;
      }
      
      // „Éï„Ç£„É´„Çø„Éº„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂÆåÂÖ®„Å™„Éá„Éº„ÇøÂÜçÂèñÂæó
      // „Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„Å´Âêà„Çè„Å™„Åè„Å™„Å£„ÅüToDo„ÅåÈÅ©Âàá„Å´Èô§Â§ñ„Åï„Çå„Çã
      const hasActiveFilters = filterParams && (
        (filterParams.priorityIds && filterParams.priorityIds.length > 0) || 
        (filterParams.statusIds && filterParams.statusIds.length > 0)
      );
      
      if (hasActiveFilters) {
        // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®ÊôÇ: ÂÆåÂÖ®„Å™„Éá„Éº„ÇøÂÜçÂèñÂæó„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÇíÂÜçÂÆüË°å
        await fetchTodos();
      } else {
        // „Éï„Ç£„É´„Çø„Éº„Å™„ÅóÊôÇ: Êó¢Â≠ò„ÅÆÂÄãÂà•Êõ¥Êñ∞„É≠„Ç∏„ÉÉ„ÇØ„ÇíÁ∂≠ÊåÅÔºà„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÈáçË¶ñÔºâ
        const { data: updatedTodo, error: fetchError } = await supabase
          .from('todos')
          .select(`*, priority:todo_priorities(*), status:todo_statuses(*)`)
          .eq('id', id)
          .single();
        
        if (fetchError || !updatedTodo) {
          throw new Error('Êõ¥Êñ∞„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
        
        setTodos(prev => prev.map(todo => 
          todo.id === id ? updatedTodo : todo
        ));
      }
      
      return true;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Á∑®ÈõÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      return false;
    } finally {
      setIsUpdateTodoLoading(false);
    }
  };

  return { 
    todos, 
    setTodos, 
    isLoading, 
    error, 
    deleteTodo, 
    isToggleLoading,
    addTodo,
    isAddTodoLoading,
    isUpdateTodoLoading,
    isDeleteTodoLoading,
    updateTodo
  };
}